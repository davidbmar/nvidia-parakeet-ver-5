#!/bin/bash
#
# RIVA-225-BRIDGE-CONFIG: Configure WebSocket Bridge Settings and RIVA Connection
#
# Purpose: Generate WebSocket bridge configuration for real-time transcription
# Prerequisites: TLS termination (riva-220) completed, Python environment ready
# Outputs: WebSocket bridge config, RIVA connection settings, service configuration
#

# Source common functions
source "$(dirname "$0")/riva-2xx-common.sh"

# Initialize script
init_script

# =============================================================================
# MAIN BRIDGE CONFIGURATION
# =============================================================================

main() {
    log_info "⚙️ Configuring WebSocket Bridge Settings and RIVA Connection"

    # Load configuration
    load_config

    # Validate required environment variables
    validate_env_vars "RIVA_HOST" "RIVA_PORT" "WS_PORT"

    # Check if already completed
    if check_step_completion; then
        log_info "Bridge configuration already setup, continuing for idempotence..."
    fi

    # Step 1: Validate RIVA connectivity
    validate_riva_connectivity

    # Step 2: Create bridge configuration
    create_bridge_config

    # Step 3: Setup WebSocket service configuration
    setup_websocket_config

    # Step 4: Configure audio processing settings
    configure_audio_settings

    # Step 5: Setup logging and monitoring
    configure_logging

    # Step 6: Create environment validation
    create_environment_validation

    # Step 7: Generate service templates
    generate_service_templates

    # Step 8: Create bridge configuration report
    generate_bridge_report

    # Save configuration snapshot
    save_config_snapshot

    # Mark completion
    mark_step_complete "WebSocket bridge configuration completed successfully"

    # Print next step
    print_next_step "./scripts/riva-230-bridge-run.sh" "Launch monitored WebSocket service for real-time transcription"
}

# =============================================================================
# CONFIGURATION FUNCTIONS
# =============================================================================

validate_riva_connectivity() {
    log_info "🔌 Validating RIVA connectivity..."

    # Test basic connectivity
    if check_port "$RIVA_HOST" "$RIVA_PORT" 10; then
        log_success "✅ RIVA server accessible on $RIVA_HOST:$RIVA_PORT"
    else
        log_error "❌ Cannot reach RIVA server on $RIVA_HOST:$RIVA_PORT"
        exit 1
    fi

    # Test gRPC service if grpcurl is available
    if command_exists grpcurl; then
        log_info "Testing gRPC service availability..."
        if grpcurl -plaintext "$RIVA_HOST:$RIVA_PORT" list >/dev/null 2>&1; then
            log_success "✅ gRPC services available"
        else
            log_warning "⚠️ gRPC services not accessible (may need authentication)"
        fi
    fi

    log_json "riva_connectivity_validated" "RIVA connectivity validated" "{\"host\": \"$RIVA_HOST\", \"port\": \"$RIVA_PORT\"}"
}

create_bridge_config() {
    log_info "🌉 Creating WebSocket bridge configuration..."

    local config_dir="$PROJECT_ROOT/config"
    local config_file="$config_dir/bridge-config.yaml"

    mkdir -p "$config_dir"

    # Generate comprehensive bridge configuration
    cat > "$config_file" << EOF
# RIVA WebSocket Bridge Configuration
# Generated by riva-225-bridge-config.sh on $(date -Iseconds)

# Server Configuration
server:
  host: "${WS_HOST:-0.0.0.0}"
  port: ${WS_PORT}
  ssl_enabled: ${USE_TLS:-true}
  cors_enabled: true
  cors_origins:
    - "https://${TLS_DOMAIN}"
    - "http://localhost:3000"
    - "http://localhost:8080"

# RIVA Connection
riva:
  host: "${RIVA_HOST}"
  port: ${RIVA_PORT}
  ssl_enabled: ${RIVA_SSL:-false}
  timeout_seconds: ${RIVA_TIMEOUT:-30}
  retry_attempts: ${RIVA_RETRY_ATTEMPTS:-3}
  retry_delay_seconds: ${RIVA_RETRY_DELAY:-5}

  # Model Configuration
  model:
    name: "${RIVA_MODEL_NAME:-parakeet-rnnt-1.1b}"
    language: "${RIVA_LANGUAGE:-en-US}"
    sample_rate: ${RIVA_SAMPLE_RATE:-16000}
    channels: ${RIVA_CHANNELS:-1}
    encoding: "${RIVA_ENCODING:-LINEAR_PCM}"

# Audio Processing
audio:
  sample_rate: ${AUDIO_SAMPLE_RATE:-16000}
  channels: ${AUDIO_CHANNELS:-1}
  chunk_size_ms: ${AUDIO_CHUNK_SIZE_MS:-100}
  buffer_size_ms: ${AUDIO_BUFFER_SIZE_MS:-2000}
  vad_enabled: ${VAD_ENABLED:-true}
  vad_threshold: ${VAD_THRESHOLD:-0.6}
  noise_reduction: ${NOISE_REDUCTION:-true}

# Transcription Features
transcription:
  enable_partial_results: ${ENABLE_PARTIAL_RESULTS:-true}
  enable_word_timestamps: ${ENABLE_WORD_TIMESTAMPS:-true}
  enable_confidence_scores: ${ENABLE_CONFIDENCE_SCORES:-true}
  confidence_threshold: ${CONFIDENCE_THRESHOLD:-0.7}

  # Speaker Diarization
  diarization:
    enabled: ${DIARIZATION_ENABLED:-false}
    mode: "${DIARIZATION_MODE:-turntaking}"
    max_speakers: ${DIARIZATION_MAX_SPEAKERS:-4}

# WebSocket Settings
websocket:
  ping_interval: ${WS_PING_INTERVAL:-30}
  ping_timeout: ${WS_PING_TIMEOUT:-10}
  close_timeout: ${WS_CLOSE_TIMEOUT:-10}
  max_size: ${WS_MAX_SIZE:-16777216}  # 16MB
  max_queue: ${WS_MAX_QUEUE:-32}

  # Rate Limiting
  rate_limit:
    enabled: ${RATE_LIMIT_ENABLED:-true}
    max_connections_per_ip: ${RATE_LIMIT_MAX_CONN:-10}
    max_requests_per_minute: ${RATE_LIMIT_MAX_REQ:-60}

# Security
security:
  api_key_required: ${API_KEY_REQUIRED:-false}
  api_key_header: "${API_KEY_HEADER:-X-API-Key}"
  allowed_origins: ${ALLOWED_ORIGINS:-[]}
  max_session_duration: ${MAX_SESSION_DURATION:-3600}  # 1 hour

# Logging
logging:
  level: "${LOG_LEVEL:-INFO}"
  format: "${LOG_FORMAT:-json}"
  file: "${LOG_FILE:-logs/bridge.log}"
  max_size_mb: ${LOG_MAX_SIZE_MB:-100}
  backup_count: ${LOG_BACKUP_COUNT:-5}
  json_logs: ${LOG_JSON:-true}

# Monitoring
monitoring:
  prometheus_enabled: ${PROMETHEUS_ENABLED:-true}
  prometheus_port: ${PROMETHEUS_PORT:-9090}
  health_check_enabled: true
  health_check_path: "/health"
  metrics_path: "/metrics"

# Development/Testing
development:
  mock_mode: ${MOCK_MODE:-false}
  debug_enabled: ${DEBUG_ENABLED:-false}
  verbose_logging: ${VERBOSE_LOGGING:-false}
  save_audio_files: ${SAVE_AUDIO_FILES:-false}
  audio_save_dir: "${AUDIO_SAVE_DIR:-./debug/audio}"
EOF

    log_success "✅ Bridge configuration created: $config_file"
    add_artifact "$config_file" "bridge_config" "{\"ws_port\": \"$WS_PORT\", \"riva_host\": \"$RIVA_HOST\"}"

    log_json "bridge_config_created" "WebSocket bridge configuration created" "{\"config_file\": \"$config_file\"}"
}

setup_websocket_config() {
    log_info "🔧 Setting up WebSocket service configuration..."

    local config_dir="$PROJECT_ROOT/config"
    local ws_env_file="$config_dir/websocket.env"

    # Create WebSocket-specific environment file
    cat > "$ws_env_file" << EOF
# WebSocket Bridge Environment Configuration
# Generated by riva-225-bridge-config.sh on $(date -Iseconds)

# Server Settings
WS_HOST=${WS_HOST:-0.0.0.0}
WS_PORT=${WS_PORT}
USE_TLS=${USE_TLS:-true}
TLS_CERT_PATH=${TLS_CERT_FILE:-/etc/ssl/certs/riva.crt}
TLS_KEY_PATH=${TLS_KEY_FILE:-/etc/ssl/private/riva.key}

# RIVA Connection
RIVA_URI=${RIVA_HOST}:${RIVA_PORT}
RIVA_SSL=${RIVA_SSL:-false}
RIVA_AUTH_TOKEN=${RIVA_AUTH_TOKEN:-}

# Audio Configuration
AUDIO_SAMPLE_RATE=${AUDIO_SAMPLE_RATE:-16000}
AUDIO_CHUNK_SIZE=${AUDIO_CHUNK_SIZE_MS:-100}
AUDIO_FORMAT=${RIVA_ENCODING:-LINEAR_PCM}

# Feature Flags
ENABLE_PARTIALS=${ENABLE_PARTIAL_RESULTS:-true}
ENABLE_TIMESTAMPS=${ENABLE_WORD_TIMESTAMPS:-true}
ENABLE_CONFIDENCE=${ENABLE_CONFIDENCE_SCORES:-true}
ENABLE_DIARIZATION=${DIARIZATION_ENABLED:-false}

# Performance
MAX_CONCURRENT_SESSIONS=${MAX_CONCURRENT_SESSIONS:-10}
SESSION_TIMEOUT=${MAX_SESSION_DURATION:-3600}
BUFFER_SIZE=${AUDIO_BUFFER_SIZE_MS:-2000}

# Development
DEBUG_MODE=${DEBUG_ENABLED:-false}
MOCK_MODE=${MOCK_MODE:-false}
SAVE_DEBUG_AUDIO=${SAVE_AUDIO_FILES:-false}
EOF

    log_success "✅ WebSocket environment configuration created: $ws_env_file"
    add_artifact "$ws_env_file" "websocket_env" "{\"port\": \"$WS_PORT\"}"

    log_json "websocket_config_created" "WebSocket service configuration created" "{\"env_file\": \"$ws_env_file\"}"
}

configure_audio_settings() {
    log_info "🎵 Configuring audio processing settings..."

    local config_dir="$PROJECT_ROOT/config"
    local audio_config="$config_dir/audio-config.yaml"

    cat > "$audio_config" << EOF
# Audio Processing Configuration
# Generated by riva-225-bridge-config.sh on $(date -Iseconds)

# Input Audio Settings
input:
  sample_rate: ${AUDIO_SAMPLE_RATE:-16000}
  channels: ${AUDIO_CHANNELS:-1}
  bit_depth: ${AUDIO_BIT_DEPTH:-16}
  encoding: "${RIVA_ENCODING:-LINEAR_PCM}"

  # Chunk Processing
  chunk_duration_ms: ${AUDIO_CHUNK_SIZE_MS:-100}
  overlap_ms: ${AUDIO_OVERLAP_MS:-10}
  buffer_duration_ms: ${AUDIO_BUFFER_SIZE_MS:-2000}

# Audio Processing Pipeline
processing:
  # Voice Activity Detection
  vad:
    enabled: ${VAD_ENABLED:-true}
    threshold: ${VAD_THRESHOLD:-0.6}
    min_speech_duration_ms: ${VAD_MIN_SPEECH:-100}
    min_silence_duration_ms: ${VAD_MIN_SILENCE:-300}

  # Noise Reduction
  noise_reduction:
    enabled: ${NOISE_REDUCTION:-true}
    algorithm: "${NOISE_ALGORITHM:-spectral_subtraction}"
    strength: ${NOISE_STRENGTH:-0.5}

  # Audio Normalization
  normalization:
    enabled: ${AUDIO_NORMALIZATION:-true}
    target_level: ${AUDIO_TARGET_LEVEL:--20}  # dBFS
    max_gain: ${AUDIO_MAX_GAIN:-20}  # dB

# Format Conversion
conversion:
  auto_resample: true
  target_sample_rate: ${RIVA_SAMPLE_RATE:-16000}
  auto_mono: true
  auto_format: true

# Quality Thresholds
quality:
  min_snr_db: ${MIN_SNR_DB:-10}
  max_clipping_ratio: ${MAX_CLIPPING_RATIO:-0.05}
  silence_threshold_db: ${SILENCE_THRESHOLD_DB:--40}

# Debug/Development
debug:
  save_processed_audio: ${SAVE_PROCESSED_AUDIO:-false}
  save_original_audio: ${SAVE_ORIGINAL_AUDIO:-false}
  audio_debug_dir: "${AUDIO_DEBUG_DIR:-./debug/audio}"
  log_audio_stats: ${LOG_AUDIO_STATS:-false}
EOF

    log_success "✅ Audio processing configuration created: $audio_config"
    add_artifact "$audio_config" "audio_config" "{\"sample_rate\": \"${AUDIO_SAMPLE_RATE:-16000}\"}"

    log_json "audio_config_created" "Audio processing configuration created" "{\"config_file\": \"$audio_config\"}"
}

configure_logging() {
    log_info "📊 Configuring logging and monitoring..."

    local config_dir="$PROJECT_ROOT/config"
    local logging_config="$config_dir/logging-config.yaml"

    cat > "$logging_config" << EOF
# Logging Configuration for WebSocket Bridge
# Generated by riva-225-bridge-config.sh on $(date -Iseconds)

version: 1
disable_existing_loggers: false

formatters:
  standard:
    format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

  json:
    format: "%(asctime)s"
    class: pythonjsonlogger.jsonlogger.JsonFormatter
    datefmt: "%Y-%m-%dT%H:%M:%S"

  detailed:
    format: "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d - %(funcName)s(): %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

handlers:
  console:
    class: logging.StreamHandler
    level: ${LOG_LEVEL:-INFO}
    formatter: standard
    stream: ext://sys.stdout

  file:
    class: logging.handlers.RotatingFileHandler
    level: ${LOG_LEVEL:-INFO}
    formatter: ${LOG_JSON:-true} and json or standard
    filename: ${LOG_FILE:-logs/bridge.log}
    maxBytes: ${LOG_MAX_SIZE_MB:-100}000000  # 100MB
    backupCount: ${LOG_BACKUP_COUNT:-5}
    encoding: utf8

  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: ${LOG_ERROR_FILE:-logs/bridge-errors.log}
    maxBytes: 50000000  # 50MB
    backupCount: 3
    encoding: utf8

  audit_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: json
    filename: ${LOG_AUDIT_FILE:-logs/bridge-audit.log}
    maxBytes: 100000000  # 100MB
    backupCount: 10
    encoding: utf8

loggers:
  bridge:
    level: ${LOG_LEVEL:-INFO}
    handlers: [console, file, error_file]
    propagate: false

  bridge.audit:
    level: INFO
    handlers: [audit_file]
    propagate: false

  bridge.websocket:
    level: ${WS_LOG_LEVEL:-INFO}
    handlers: [console, file]
    propagate: false

  bridge.riva:
    level: ${RIVA_LOG_LEVEL:-INFO}
    handlers: [console, file]
    propagate: false

  bridge.audio:
    level: ${AUDIO_LOG_LEVEL:-INFO}
    handlers: [console, file]
    propagate: false

root:
  level: ${LOG_LEVEL:-INFO}
  handlers: [console, file]
EOF

    log_success "✅ Logging configuration created: $logging_config"
    add_artifact "$logging_config" "logging_config" "{\"log_level\": \"${LOG_LEVEL:-INFO}\"}"

    log_json "logging_config_created" "Logging configuration created" "{\"config_file\": \"$logging_config\"}"
}

create_environment_validation() {
    log_info "✅ Creating environment validation script..."

    local validation_script="$PROJECT_ROOT/scripts/validate-bridge-env.sh"

    cat > "$validation_script" << 'EOF'
#!/bin/bash
#
# Validate WebSocket Bridge Environment
# Checks all required environment variables and dependencies
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Validation results
VALIDATION_ERRORS=0
VALIDATION_WARNINGS=0

error() {
    echo -e "${RED}❌ ERROR: $1${NC}"
    ((VALIDATION_ERRORS++))
}

warning() {
    echo -e "${YELLOW}⚠️  WARNING: $1${NC}"
    ((VALIDATION_WARNINGS++))
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

info() {
    echo -e "ℹ️  $1"
}

# Load environment
if [[ -f .env ]]; then
    source .env
    success "Environment file loaded: .env"
else
    error "Environment file not found: .env"
fi

# Check required variables
echo "🔍 Checking required environment variables..."

required_vars=(
    "RIVA_HOST"
    "RIVA_PORT"
    "WS_PORT"
    "TLS_DOMAIN"
)

for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        error "Required variable not set: $var"
    else
        success "$var = ${!var}"
    fi
done

# Check optional but important variables
echo "🔍 Checking optional configuration..."

optional_vars=(
    "USE_TLS:true"
    "MOCK_MODE:false"
    "LOG_LEVEL:INFO"
    "AUDIO_SAMPLE_RATE:16000"
    "ENABLE_PARTIAL_RESULTS:true"
)

for var_default in "${optional_vars[@]}"; do
    var="${var_default%:*}"
    default="${var_default#*:}"
    value="${!var:-$default}"
    info "$var = $value"
done

# Test RIVA connectivity
echo "🔌 Testing RIVA connectivity..."
if timeout 10 bash -c "</dev/tcp/${RIVA_HOST}/${RIVA_PORT}" 2>/dev/null; then
    success "RIVA server reachable at ${RIVA_HOST}:${RIVA_PORT}"
else
    error "Cannot reach RIVA server at ${RIVA_HOST}:${RIVA_PORT}"
fi

# Check Python environment
echo "🐍 Checking Python environment..."
if [[ -n "${VIRTUAL_ENV:-}" ]]; then
    success "Virtual environment active: $VIRTUAL_ENV"
else
    warning "No virtual environment detected"
fi

# Check required Python packages
required_packages=(
    "websockets"
    "fastapi"
    "uvicorn"
    "riva"
    "numpy"
)

for package in "${required_packages[@]}"; do
    if python -c "import $package" 2>/dev/null; then
        success "Python package available: $package"
    else
        error "Python package missing: $package"
    fi
done

# Check TLS configuration
echo "🔒 Checking TLS configuration..."
if [[ "${USE_TLS:-true}" == "true" ]]; then
    if [[ -n "${TLS_CERT_FILE:-}" ]] && [[ -f "${TLS_CERT_FILE}" ]]; then
        success "TLS certificate file found: ${TLS_CERT_FILE}"
    elif [[ -f "/etc/letsencrypt/live/${TLS_DOMAIN}/fullchain.pem" ]]; then
        success "Let's Encrypt certificate found for ${TLS_DOMAIN}"
    else
        warning "TLS enabled but no certificate file found"
    fi
fi

# Check port availability
echo "🔌 Checking port availability..."
if ss -ln | grep -q ":${WS_PORT} "; then
    warning "Port ${WS_PORT} is already in use"
else
    success "Port ${WS_PORT} is available"
fi

# Summary
echo ""
echo "📊 Validation Summary:"
if [[ $VALIDATION_ERRORS -eq 0 ]] && [[ $VALIDATION_WARNINGS -eq 0 ]]; then
    success "All checks passed! Environment is ready."
    exit 0
elif [[ $VALIDATION_ERRORS -eq 0 ]]; then
    warning "$VALIDATION_WARNINGS warning(s) found. Environment should work but check warnings."
    exit 0
else
    error "$VALIDATION_ERRORS error(s) and $VALIDATION_WARNINGS warning(s) found."
    echo "Please fix errors before proceeding."
    exit 1
fi
EOF

    chmod +x "$validation_script"

    log_success "✅ Environment validation script created: $validation_script"
    add_artifact "$validation_script" "validation_script" "{\"executable\": true}"

    log_json "validation_script_created" "Environment validation script created" "{\"script\": \"$validation_script\"}"
}

generate_service_templates() {
    log_info "🚀 Generating service templates..."

    local config_dir="$PROJECT_ROOT/config"
    local systemd_template="$config_dir/riva-bridge.service.template"

    # Create systemd service template
    cat > "$systemd_template" << EOF
[Unit]
Description=RIVA WebSocket Bridge
After=network.target
Wants=network.target

[Service]
Type=exec
User=ubuntu
Group=ubuntu
WorkingDirectory=${PROJECT_ROOT}
Environment=PATH=${PROJECT_ROOT}/venv-riva-ws/bin:/usr/local/bin:/usr/bin:/bin
EnvironmentFile=${PROJECT_ROOT}/.env
EnvironmentFile=${PROJECT_ROOT}/config/websocket.env

# Security
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=read-only
ReadWritePaths=${PROJECT_ROOT}/logs
ReadWritePaths=${PROJECT_ROOT}/artifacts
ReadWritePaths=${PROJECT_ROOT}/debug

# Service execution
ExecStart=${PROJECT_ROOT}/venv-riva-ws/bin/python -m bridge.main --config ${PROJECT_ROOT}/config/bridge-config.yaml
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=riva-bridge

# Limits
LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target
EOF

    log_success "✅ Systemd service template created: $systemd_template"

    # Create Docker Compose template
    local docker_compose="$config_dir/docker-compose.yaml.template"

    cat > "$docker_compose" << EOF
version: '3.8'

services:
  riva-bridge:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: Dockerfile
    container_name: riva-bridge
    restart: unless-stopped

    ports:
      - "${WS_PORT}:${WS_PORT}"

    environment:
      - RIVA_HOST=${RIVA_HOST}
      - RIVA_PORT=${RIVA_PORT}
      - WS_PORT=${WS_PORT}
      - USE_TLS=${USE_TLS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    env_file:
      - .env
      - config/websocket.env

    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./artifacts:/app/artifacts

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WS_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    depends_on:
      - prometheus

    networks:
      - riva-network

  prometheus:
    image: prom/prometheus:latest
    container_name: riva-prometheus
    restart: unless-stopped

    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"

    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    networks:
      - riva-network

volumes:
  prometheus-data:

networks:
  riva-network:
    driver: bridge
EOF

    log_success "✅ Docker Compose template created: $docker_compose"

    add_artifact "$systemd_template" "systemd_template" "{\"service_name\": \"riva-bridge\"}"
    add_artifact "$docker_compose" "docker_compose_template" "{\"services\": [\"riva-bridge\", \"prometheus\"]}"

    log_json "service_templates_created" "Service deployment templates created" "{\"systemd\": \"$systemd_template\", \"docker\": \"$docker_compose\"}"
}

generate_bridge_report() {
    log_info "📋 Generating bridge configuration report..."

    local report_file="$ARTIFACTS_DIR/checks/bridge-config-$TIMESTAMP.json"

    {
        echo "{"
        echo "  \"timestamp\": \"$(date -Iseconds)\","
        echo "  \"script\": \"riva-225-bridge-config\","
        echo "  \"configuration\": {"
        echo "    \"riva\": {"
        echo "      \"host\": \"$RIVA_HOST\","
        echo "      \"port\": \"$RIVA_PORT\","
        echo "      \"ssl\": \"${RIVA_SSL:-false}\","
        echo "      \"model\": \"${RIVA_MODEL_NAME:-parakeet-rnnt-1.1b}\""
        echo "    },"
        echo "    \"websocket\": {"
        echo "      \"host\": \"${WS_HOST:-0.0.0.0}\","
        echo "      \"port\": \"$WS_PORT\","
        echo "      \"tls_enabled\": \"${USE_TLS:-true}\","
        echo "      \"domain\": \"${TLS_DOMAIN}\""
        echo "    },"
        echo "    \"audio\": {"
        echo "      \"sample_rate\": \"${AUDIO_SAMPLE_RATE:-16000}\","
        echo "      \"channels\": \"${AUDIO_CHANNELS:-1}\","
        echo "      \"chunk_size_ms\": \"${AUDIO_CHUNK_SIZE_MS:-100}\","
        echo "      \"encoding\": \"${RIVA_ENCODING:-LINEAR_PCM}\""
        echo "    },"
        echo "    \"features\": {"
        echo "      \"partial_results\": \"${ENABLE_PARTIAL_RESULTS:-true}\","
        echo "      \"word_timestamps\": \"${ENABLE_WORD_TIMESTAMPS:-true}\","
        echo "      \"confidence_scores\": \"${ENABLE_CONFIDENCE_SCORES:-true}\","
        echo "      \"diarization\": \"${DIARIZATION_ENABLED:-false}\""
        echo "    }"
        echo "  },"
        echo "  \"validation\": {"
        echo "    \"riva_reachable\": $(check_port "$RIVA_HOST" "$RIVA_PORT" 5 && echo "true" || echo "false"),"
        echo "    \"ws_port_available\": $(ss -ln | grep -q ":$WS_PORT " && echo "false" || echo "true"),"
        echo "    \"python_env_active\": $(test -n "${VIRTUAL_ENV:-}" && echo "true" || echo "false"),"
        echo "    \"config_files_created\": true"
        echo "  },"
        echo "  \"files\": {"
        echo "    \"bridge_config\": \"config/bridge-config.yaml\","
        echo "    \"websocket_env\": \"config/websocket.env\","
        echo "    \"audio_config\": \"config/audio-config.yaml\","
        echo "    \"logging_config\": \"config/logging-config.yaml\","
        echo "    \"validation_script\": \"scripts/validate-bridge-env.sh\""
        echo "  }"
        echo "}"
    } > "$report_file"

    add_artifact "$report_file" "bridge_config_report" "{\"riva_host\": \"$RIVA_HOST\", \"ws_port\": \"$WS_PORT\"}"

    log_success "✅ Bridge configuration report generated: $report_file"
}

# =============================================================================
# EXECUTION
# =============================================================================

main "$@"